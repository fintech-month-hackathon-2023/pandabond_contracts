{
  "version": "3.4",
  "log": [
    {
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink\\contracts\\src\\v0.8\\interfaces\\AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:20",
        "version": {
          "withMetadata": "4a4ace96d365c9d72514b4d5f67028f1d5924635374f55b5fdd54d62bf80922c",
          "withoutMetadata": "b5905581a491aa47a4f3b0489e91566927385b66e6c306f67ce5af2f89473364",
          "linkedWithoutMetadata": "b5905581a491aa47a4f3b0489e91566927385b66e6c306f67ce5af2f89473364"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "(string)",
          "supportsInterface(bytes4)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:14",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\extensions\\IERC1155MetadataURI.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "c01fa026eba41cbaaa7449f2e391abb1ad5c05c3d433e87f190cd120f13307b0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/BondFactory.sol:BondFactory": {
        "src": "contracts\\BondFactory.sol:8",
        "version": {
          "withMetadata": "92ab2524c1d843eceb8852d06b3f2c8bc364c851f244c336c0bf73bad241eb2c",
          "withoutMetadata": "589180d9e2e29a46f2e55c0c9c56e73e3d2d0bc900d1c2d75257fce993f45c2d",
          "linkedWithoutMetadata": "589180d9e2e29a46f2e55c0c9c56e73e3d2d0bc900d1c2d75257fce993f45c2d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,address)",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256,bytes)",
          "purchase(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawExcess(uint256)",
          "redeem(uint256,uint256)",
          "redeemCanceled(uint256,uint256)",
          "redeemDefaulted(uint256,uint256)",
          "deposit(uint256,uint256)",
          "markAsDefaulted(uint256)",
          "markAsCompleted(uint256)",
          "remainingQuantity(uint256)",
          "timeElapsed(uint256)",
          "timeRemainingToMaturity(uint256)",
          "timeRemainingToEndOfActive(uint256)",
          "couponRate(uint256)",
          "principal(uint256)",
          "principalWithInterest(uint256)",
          "poolAmount(uint256)",
          "tvl()",
          "isFullyRedeemed(uint256)",
          "isActive(uint256)",
          "isFulfilled(uint256)",
          "isCanceled(uint256)",
          "hasReachedMaturity(uint256)",
          "isCompleted(uint256)",
          "isCompletedInTheory(uint256)",
          "isDefaultedInTheory(uint256)",
          "isDefaulted(uint256)",
          "bondmetaData(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BondFactory",
            "src": "contracts\\BondFactory.sol:45"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\BondFactory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_baseToken",
            "src": "contracts\\BondFactory.sol:10"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_id",
            "src": "contracts\\BondFactory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:11"
            },
            {
              "label": "_bondMetadata",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(BondMetadata)1947_storage)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:26"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:27"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:28"
            },
            {
              "label": "_designatedTokenPool",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:29"
            },
            {
              "label": "_tokenAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:30"
            },
            {
              "label": "_tokenAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:31"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:33"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondMetadata)1947_storage)": {
              "label": "mapping(uint256 => struct BondFactory.BondMetadata)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BondMetadata)1947_storage": {
              "label": "struct BondFactory.BondMetadata",
              "members": [
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "initBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maturityBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endOfActiveBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeDurationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "durationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "issuedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "minPurchasedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "couponRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/CallableBondFactory.sol:CallableBondFactory": {
        "src": "contracts\\CallableBondFactory.sol:7",
        "version": {
          "withMetadata": "faa8ba24e7cf88eeae01157f777efb43323dcd0f7a4640fb6d4bc56c6b2df118",
          "withoutMetadata": "b30df25039c2f354e4b513363e2f7f01cdb497b703be1a74f88a5743f9957235",
          "linkedWithoutMetadata": "b30df25039c2f354e4b513363e2f7f01cdb497b703be1a74f88a5743f9957235"
        },
        "inherit": [
          "contracts/BondFactory.sol:BondFactory",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,address)",
          "call(uint256)",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256,bytes)",
          "principalWithInterest(uint256)",
          "couponRateOnCall(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CallableBondFactory",
            "src": "contracts\\CallableBondFactory.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:11"
            },
            {
              "label": "_bondMetadata",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(BondMetadata)1947_storage)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:26"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:27"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:28"
            },
            {
              "label": "_designatedTokenPool",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:29"
            },
            {
              "label": "_tokenAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:30"
            },
            {
              "label": "_tokenAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:31"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:33"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:34"
            },
            {
              "label": "_minObligationPeriod",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "CallableBondFactory",
              "src": "contracts\\CallableBondFactory.sol:8"
            },
            {
              "label": "_couponRateOnCall",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "CallableBondFactory",
              "src": "contracts\\CallableBondFactory.sol:9"
            },
            {
              "label": "_isCalled",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "CallableBondFactory",
              "src": "contracts\\CallableBondFactory.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondMetadata)1947_storage)": {
              "label": "mapping(uint256 => struct BondFactory.BondMetadata)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BondMetadata)1947_storage": {
              "label": "struct BondFactory.BondMetadata",
              "members": [
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "initBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maturityBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endOfActiveBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeDurationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "durationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "issuedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "minPurchasedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "couponRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/DualCurrencyBondFactory.sol:DualCurrencyBondFactory": {
        "src": "contracts\\DualCurrencyBondFactory.sol:9",
        "version": {
          "withMetadata": "d6c7404585a1b4754d215c542d8f01421ebdaab9fd1a693e472ee1722f3e611e",
          "withoutMetadata": "43d397d86aa69e025da7b6fdeff4eb399b1c4ab035001ba2bc2ab119d0becb55",
          "linkedWithoutMetadata": "43d397d86aa69e025da7b6fdeff4eb399b1c4ab035001ba2bc2ab119d0becb55"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,address,address,address,address)",
          "getLatestPriceA()",
          "getLatestPriceB()",
          "getAtoBExchangeRate()",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256,bytes)",
          "purchase(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawExcess(uint256)",
          "redeem(uint256,uint256)",
          "redeemCanceled(uint256,uint256)",
          "redeemDefaulted(uint256,uint256)",
          "deposit(uint256,uint256)",
          "markAsDefaulted(uint256)",
          "markAsCompleted(uint256)",
          "remainingQuantity(uint256)",
          "timeElapsed(uint256)",
          "timeRemainingToMaturity(uint256)",
          "timeRemainingToEndOfActive(uint256)",
          "couponRate(uint256)",
          "principal(uint256)",
          "principalWithInterest(uint256)",
          "poolAAmount(uint256)",
          "poolBAmount(uint256)",
          "tvlA()",
          "tvlB()",
          "isFullyRedeemed(uint256)",
          "isActive(uint256)",
          "isFulfilled(uint256)",
          "isCanceled(uint256)",
          "hasReachedMaturity(uint256)",
          "isCompleted(uint256)",
          "isCompletedInTheory(uint256)",
          "isDefaultedInTheory(uint256)",
          "isDefaulted(uint256)",
          "bondmetaData(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DualCurrencyBondFactory",
            "src": "contracts\\DualCurrencyBondFactory.sol:54"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\DualCurrencyBondFactory.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_tokenA",
            "src": "contracts\\DualCurrencyBondFactory.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_tokenB",
            "src": "contracts\\DualCurrencyBondFactory.sol:15"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_id",
            "src": "contracts\\DualCurrencyBondFactory.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_priceFeedA",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(AggregatorV3Interface)45",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:10"
            },
            {
              "label": "_priceFeedB",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(AggregatorV3Interface)45",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:11"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:16"
            },
            {
              "label": "_bondMetadata",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(BondMetadata)3316_storage)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:33"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:34"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:35"
            },
            {
              "label": "_designatedTokenAPool",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:36"
            },
            {
              "label": "_designatedTokenBPool",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:37"
            },
            {
              "label": "_tokenAAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:38"
            },
            {
              "label": "_tokenBAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:39"
            },
            {
              "label": "_tokenBAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:40"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:42"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AggregatorV3Interface)45": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondMetadata)3316_storage)": {
              "label": "mapping(uint256 => struct DualCurrencyBondFactory.BondMetadata)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BondMetadata)3316_storage": {
              "label": "struct DualCurrencyBondFactory.BondMetadata",
              "members": [
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenAAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenBAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "initBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maturityBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "endOfActiveBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "activeDurationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "durationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "issuedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "minPurchasedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "couponRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/InstallmentBondFactory.sol:InstallmentBondFactory": {
        "src": "contracts\\InstallmentBondFactory.sol:6",
        "version": {
          "withMetadata": "3d6aa81d987dc611b6ebbfbd8a354c39997c2d24f0e98caa0ce01d4fb1e94498",
          "withoutMetadata": "19552ff577cbd2207044c61139fb7ccf2398650f20035e0ce56b9d8cfa1c3a2f",
          "linkedWithoutMetadata": "19552ff577cbd2207044c61139fb7ccf2398650f20035e0ce56b9d8cfa1c3a2f"
        },
        "inherit": [
          "contracts/BondFactory.sol:BondFactory",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,address)",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256,bytes)",
          "fulfillObligationsAndLock(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "isDefaultedInTheory(uint256)",
          "lockedTokenAmount(uint256)",
          "lockedTokenAmountPerBond(uint256)",
          "yearOptionToDays(uint256)",
          "yearOptionToObligationRateList(uint256)",
          "retrieveMinObligationList(uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "InstallmentBondFactory",
            "src": "contracts\\InstallmentBondFactory.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "THREE",
            "src": "contracts\\InstallmentBondFactory.sol:8"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FIVE",
            "src": "contracts\\InstallmentBondFactory.sol:9"
          },
          {
            "kind": "state-variable-assignment",
            "name": "TEN",
            "src": "contracts\\InstallmentBondFactory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:11"
            },
            {
              "label": "_bondMetadata",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(BondMetadata)1947_storage)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:26"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:27"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:28"
            },
            {
              "label": "_designatedTokenPool",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:29"
            },
            {
              "label": "_tokenAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:30"
            },
            {
              "label": "_tokenAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:31"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:33"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:34"
            },
            {
              "label": "THREE",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:8"
            },
            {
              "label": "FIVE",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:9"
            },
            {
              "label": "TEN",
              "offset": 0,
              "slot": "14",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:10"
            },
            {
              "label": "_nextObligationDate",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:15"
            },
            {
              "label": "_minObligationTokenAmountPerBondList",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:16"
            },
            {
              "label": "_lockedTokenAmount",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:17"
            },
            {
              "label": "_numberOfTimesFulfilled",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondMetadata)1947_storage)": {
              "label": "mapping(uint256 => struct BondFactory.BondMetadata)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BondMetadata)1947_storage": {
              "label": "struct BondFactory.BondMetadata",
              "members": [
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "initBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maturityBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endOfActiveBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeDurationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "durationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "issuedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "minPurchasedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "couponRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      }
    }
  ]
}