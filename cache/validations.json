{
  "version": "3.4",
  "log": [
    {
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink\\contracts\\src\\v0.8\\interfaces\\AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:20",
        "version": {
          "withMetadata": "4a4ace96d365c9d72514b4d5f67028f1d5924635374f55b5fdd54d62bf80922c",
          "withoutMetadata": "b5905581a491aa47a4f3b0489e91566927385b66e6c306f67ce5af2f89473364",
          "linkedWithoutMetadata": "b5905581a491aa47a4f3b0489e91566927385b66e6c306f67ce5af2f89473364"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "(string)",
          "supportsInterface(bytes4)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:14",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\extensions\\IERC1155MetadataURI.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:19",
        "version": {
          "withMetadata": "ea342436f467ff5beaad1813ebf4e7ad602fe79faf9ad2d9f5e9f4d8be2c8371",
          "withoutMetadata": "c4acb14c6da5b7d41440e50f8a8676f304c2c14a54c323590328de16e8b1f843",
          "linkedWithoutMetadata": "c4acb14c6da5b7d41440e50f8a8676f304c2c14a54c323590328de16e8b1f843"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "c01fa026eba41cbaaa7449f2e391abb1ad5c05c3d433e87f190cd120f13307b0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Counters.sol:Counters": {
        "src": "@openzeppelin\\contracts\\utils\\Counters.sol:14",
        "version": {
          "withMetadata": "f540c5ecb8ba8ac6cdef0a26f7f84442dcf2ed180f78932be591709682950503",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:11",
        "version": {
          "withMetadata": "c12afa5e73482a0beed3b3897025589568c5560a1eafcc3ef556ea3ebcf855bc",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:9",
        "version": {
          "withMetadata": "27789be326274200c4d0ca0f809987199e8a5fcd129848ff36bc0f2372f8cd2f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/BondFactory.sol:BondFactory": {
        "src": "contracts\\BondFactory.sol:8",
        "version": {
          "withMetadata": "b9f6e8a3ce7261a740fe58e7268c6c6f256d8d0ad9708c4968776669acf9a640",
          "withoutMetadata": "50bdb985220165f1ffa0ae1457494ab64df10c9758bfa00139471e6e125c3c9f",
          "linkedWithoutMetadata": "50bdb985220165f1ffa0ae1457494ab64df10c9758bfa00139471e6e125c3c9f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,address,address)",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256)",
          "purchase(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawExcess(uint256)",
          "redeem(uint256,uint256)",
          "deposit(uint256,uint256)",
          "preMaturityDefault(uint256)",
          "markAsDefaulted(uint256)",
          "markAsCompleted(uint256)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "remainingQuantity(uint256)",
          "timeElapsed(uint256)",
          "timeRemainingToMaturity(uint256)",
          "timeRemainingToEndOfActive(uint256)",
          "couponRate(uint256)",
          "principal(uint256)",
          "principalWithInterest(uint256)",
          "poolAmount(uint256)",
          "tvl()",
          "isFullyRedeemed(uint256)",
          "isActive(uint256)",
          "isFulfilled(uint256)",
          "isCanceled(uint256)",
          "hasReachedMaturity(uint256)",
          "isCompleted(uint256)",
          "isCompletedInTheory(uint256)",
          "isDefaultedInTheory(uint256)",
          "isDefaulted(uint256)",
          "bondMetadata(uint256)",
          "baseToken()",
          "owner()",
          "fundsRaised()",
          "designatedTokenPool(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BondFactory",
            "src": "contracts\\BondFactory.sol:59"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\BondFactory.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_baseToken",
            "src": "contracts\\BondFactory.sol:10"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_id",
            "src": "contracts\\BondFactory.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:11"
            },
            {
              "label": "_fundsRaised",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:13"
            },
            {
              "label": "_bondMetadata",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_struct(BondMetadata)4285_storage)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:28"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:29"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:30"
            },
            {
              "label": "_designatedTokenPool",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:31"
            },
            {
              "label": "_tokenAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:32"
            },
            {
              "label": "_tokenAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:33"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:35"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondMetadata)4285_storage)": {
              "label": "mapping(uint256 => struct BondFactory.BondMetadata)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BondMetadata)4285_storage": {
              "label": "struct BondFactory.BondMetadata",
              "members": [
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "initBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maturityBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endOfActiveBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeDurationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "durationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "issuedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "minPurchasedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "couponRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/BondPeriphery.sol:BondPeriphery": {
        "src": "contracts\\BondPeriphery.sol:8",
        "version": {
          "withMetadata": "e64e6b4c52ba0149edce330228b8f0f039c2c8d94f1937a701c22c73693884a1",
          "withoutMetadata": "3530dfa50d979e672e3e14c837a83dd606918958b9390b9df48d49f38286d25e",
          "linkedWithoutMetadata": "3530dfa50d979e672e3e14c837a83dd606918958b9390b9df48d49f38286d25e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "register()",
          "createBondFactory(string,address)",
          "owner()",
          "entities()",
          "isRegistered(address)",
          "bondFactories(address)",
          "bondFactoryIsInitialized(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BondPeriphery",
            "src": "contracts\\BondPeriphery.sol:44"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\BondPeriphery.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_sbt",
            "src": "contracts\\BondPeriphery.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_entities",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:12"
            },
            {
              "label": "_isRegistered",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:14"
            },
            {
              "label": "_isAllowedCurrency",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:16"
            },
            {
              "label": "_bondFactories",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:18"
            },
            {
              "label": "_bondFactoryIsInitialized",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/CallableBondFactory.sol:CallableBondFactory": {
        "src": "contracts\\CallableBondFactory.sol:6",
        "version": {
          "withMetadata": "5f6d823a75cb2f1f9ea36b0a9795b013110153642f050a49a9a409a4ad16f9bc",
          "withoutMetadata": "171f4351cfa96f52e14475c9020c50e3d2bc21b34734dfbd0323cf76685619bb",
          "linkedWithoutMetadata": "171f4351cfa96f52e14475c9020c50e3d2bc21b34734dfbd0323cf76685619bb"
        },
        "inherit": [
          "contracts/BondFactory.sol:BondFactory",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,address,address)",
          "call(uint256)",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256)",
          "principalWithInterest(uint256)",
          "couponRateOnCall(uint256)",
          "isCalled(uint256)",
          "minObligationPeriod(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CallableBondFactory",
            "src": "contracts\\CallableBondFactory.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:11"
            },
            {
              "label": "_fundsRaised",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:13"
            },
            {
              "label": "_bondMetadata",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_struct(BondMetadata)4285_storage)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:28"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:29"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:30"
            },
            {
              "label": "_designatedTokenPool",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:31"
            },
            {
              "label": "_tokenAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:32"
            },
            {
              "label": "_tokenAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:33"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:35"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:36"
            },
            {
              "label": "_minObligationPeriod",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "CallableBondFactory",
              "src": "contracts\\CallableBondFactory.sol:7"
            },
            {
              "label": "_couponRateOnCall",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "CallableBondFactory",
              "src": "contracts\\CallableBondFactory.sol:8"
            },
            {
              "label": "_isCalled",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "CallableBondFactory",
              "src": "contracts\\CallableBondFactory.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondMetadata)4285_storage)": {
              "label": "mapping(uint256 => struct BondFactory.BondMetadata)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BondMetadata)4285_storage": {
              "label": "struct BondFactory.BondMetadata",
              "members": [
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "initBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maturityBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endOfActiveBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeDurationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "durationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "issuedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "minPurchasedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "couponRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/CallableBondPeriphery.sol:CallableBondPeriphery": {
        "src": "contracts\\CallableBondPeriphery.sol:9",
        "version": {
          "withMetadata": "c0a845f833a226061f76f7b8558c47df9c7ec9c8beec7132335223a1f2444044",
          "withoutMetadata": "b8337be7ad4ded51e2b8f9e254260bc60f0c038fed22833aa8f1a4e4ef566879",
          "linkedWithoutMetadata": "b8337be7ad4ded51e2b8f9e254260bc60f0c038fed22833aa8f1a4e4ef566879"
        },
        "inherit": [
          "contracts/BondPeriphery.sol:BondPeriphery"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "register()",
          "createBondFactory(string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CallableBondPeriphery",
            "src": "contracts\\CallableBondPeriphery.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_entities",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:12"
            },
            {
              "label": "_isRegistered",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:14"
            },
            {
              "label": "_isAllowedCurrency",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:16"
            },
            {
              "label": "_bondFactories",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:18"
            },
            {
              "label": "_bondFactoryIsInitialized",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/DualCurrencyBondFactory.sol:DualCurrencyBondFactory": {
        "src": "contracts\\DualCurrencyBondFactory.sol:9",
        "version": {
          "withMetadata": "b678b2db9f5c3b27efd593e3363ebe2b9b60967fedb95b8c67432fa138f35727",
          "withoutMetadata": "b681e57d22b9fd2bc180c70d5074f73bb10ae1eba2469ba7dbd52fb41c4e4a2f",
          "linkedWithoutMetadata": "b681e57d22b9fd2bc180c70d5074f73bb10ae1eba2469ba7dbd52fb41c4e4a2f"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,address,address,address,address,address)",
          "getLatestPriceA()",
          "getLatestPriceB()",
          "getAtoBExchangeRate()",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256)",
          "purchase(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawExcess(uint256)",
          "redeem(uint256,uint256)",
          "deposit(uint256,uint256)",
          "preMaturityDefault(uint256)",
          "markAsDefaulted(uint256)",
          "markAsCompleted(uint256)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "remainingQuantity(uint256)",
          "timeElapsed(uint256)",
          "timeRemainingToMaturity(uint256)",
          "timeRemainingToEndOfActive(uint256)",
          "couponRate(uint256)",
          "principal(uint256)",
          "principalWithInterest(uint256)",
          "poolAAmount(uint256)",
          "poolBAmount(uint256)",
          "tvlA()",
          "tvlB()",
          "isFullyRedeemed(uint256)",
          "isActive(uint256)",
          "isFulfilled(uint256)",
          "isCanceled(uint256)",
          "hasReachedMaturity(uint256)",
          "isCompleted(uint256)",
          "isCompletedInTheory(uint256)",
          "isDefaultedInTheory(uint256)",
          "isDefaulted(uint256)",
          "bondmetaData(uint256)",
          "designatedTokenAPool(uint256)",
          "designatedTokenBPool(uint256)",
          "tokenA()",
          "tokenB()",
          "owner()",
          "fundsRaised()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DualCurrencyBondFactory",
            "src": "contracts\\DualCurrencyBondFactory.sol:73"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_priceFeedA",
            "src": "contracts\\DualCurrencyBondFactory.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_priceFeedB",
            "src": "contracts\\DualCurrencyBondFactory.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\DualCurrencyBondFactory.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_tokenA",
            "src": "contracts\\DualCurrencyBondFactory.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_tokenB",
            "src": "contracts\\DualCurrencyBondFactory.sol:15"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_id",
            "src": "contracts\\DualCurrencyBondFactory.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:16"
            },
            {
              "label": "_fundsRaised",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:18"
            },
            {
              "label": "_bondMetadata",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_struct(BondMetadata)6295_storage)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:34"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:35"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:36"
            },
            {
              "label": "_designatedTokenAPool",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:37"
            },
            {
              "label": "_designatedTokenBPool",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:38"
            },
            {
              "label": "_tokenAAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:39"
            },
            {
              "label": "_tokenBAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:40"
            },
            {
              "label": "_tokenBAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:41"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:43"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondMetadata)6295_storage)": {
              "label": "mapping(uint256 => struct DualCurrencyBondFactory.BondMetadata)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BondMetadata)6295_storage": {
              "label": "struct DualCurrencyBondFactory.BondMetadata",
              "members": [
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenAAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tokenBAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "initBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "maturityBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "endOfActiveBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "activeDurationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "durationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "issuedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "minPurchasedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "couponRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                }
              ],
              "numberOfBytes": "352"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/DualCurrencyBondPeriphery.sol:DualCurrencyBondPeriphery": {
        "src": "contracts\\DualCurrencyBondPeriphery.sol:8",
        "version": {
          "withMetadata": "9097dc44bfa562946518f99d9d7d97d629d2fd96bd248ac508fe3a7ab73b6ec9",
          "withoutMetadata": "7bf1892da40e439f7f465c137ab4965f29002ff056231b0429ff14589ad15286",
          "linkedWithoutMetadata": "7bf1892da40e439f7f465c137ab4965f29002ff056231b0429ff14589ad15286"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "register()",
          "createDualCurrencyBondFactory(string,address,address)",
          "registerPriceFeed(address,address)",
          "deregisterPriceFeed(address)",
          "owner()",
          "entities()",
          "isRegistered(address)",
          "dualCurrencyBondFactories(address)",
          "dualCurrencyBondFactoryIsInitialized(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DualCurrencyBondPeriphery",
            "src": "contracts\\DualCurrencyBondPeriphery.sol:42"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\DualCurrencyBondPeriphery.sol:9"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_sbt",
            "src": "contracts\\DualCurrencyBondPeriphery.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_entities",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DualCurrencyBondPeriphery",
              "src": "contracts\\DualCurrencyBondPeriphery.sol:12"
            },
            {
              "label": "_priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "DualCurrencyBondPeriphery",
              "src": "contracts\\DualCurrencyBondPeriphery.sol:14"
            },
            {
              "label": "_isRegistered",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DualCurrencyBondPeriphery",
              "src": "contracts\\DualCurrencyBondPeriphery.sol:15"
            },
            {
              "label": "_dualCurrencyBondFactories",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "DualCurrencyBondPeriphery",
              "src": "contracts\\DualCurrencyBondPeriphery.sol:17"
            },
            {
              "label": "_dualCurrencyBondFactoryIsInitialized",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_bool)))",
              "contract": "DualCurrencyBondPeriphery",
              "src": "contracts\\DualCurrencyBondPeriphery.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
              "label": "mapping(address => mapping(address => mapping(address => bool)))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/InstallmentBondFactory.sol:InstallmentBondFactory": {
        "src": "contracts\\InstallmentBondFactory.sol:6",
        "version": {
          "withMetadata": "6d47a3ac847a3199c8d8f8520bb00b72644da1677a84a8bff66d74ef086cccfc",
          "withoutMetadata": "3df98f33176646ad45a0a4fed310987a177e316c8b73b861eded10a7a8c5b889",
          "linkedWithoutMetadata": "3df98f33176646ad45a0a4fed310987a177e316c8b73b861eded10a7a8c5b889"
        },
        "inherit": [
          "contracts/BondFactory.sol:BondFactory",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,address,address)",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256)",
          "fulfillObligationsAndLock(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "isDefaultedInTheory(uint256)",
          "lockedTokenAmountPerBond(uint256)",
          "yearOptionToDays(uint256)",
          "yearOptionToObligationRateList(uint256)",
          "retrieveMinObligationList(uint256,uint256)",
          "nextObligationDate(uint256)",
          "minObligationTokenAmountPerBondList(uint256)",
          "lockedTokenAmount(uint256)",
          "numberOfTimesFulfilled(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "InstallmentBondFactory",
            "src": "contracts\\InstallmentBondFactory.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "THREE",
            "src": "contracts\\InstallmentBondFactory.sol:8"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FIVE",
            "src": "contracts\\InstallmentBondFactory.sol:9"
          },
          {
            "kind": "state-variable-assignment",
            "name": "TEN",
            "src": "contracts\\InstallmentBondFactory.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:11"
            },
            {
              "label": "_fundsRaised",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:13"
            },
            {
              "label": "_bondMetadata",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_struct(BondMetadata)4285_storage)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:28"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:29"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:30"
            },
            {
              "label": "_designatedTokenPool",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:31"
            },
            {
              "label": "_tokenAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:32"
            },
            {
              "label": "_tokenAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:33"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:35"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:36"
            },
            {
              "label": "THREE",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:8"
            },
            {
              "label": "FIVE",
              "offset": 0,
              "slot": "14",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:9"
            },
            {
              "label": "TEN",
              "offset": 0,
              "slot": "15",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:10"
            },
            {
              "label": "_nextObligationDate",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:12"
            },
            {
              "label": "_minObligationTokenAmountPerBondList",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:13"
            },
            {
              "label": "_lockedTokenAmount",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:14"
            },
            {
              "label": "_numberOfTimesFulfilled",
              "offset": 0,
              "slot": "19",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondMetadata)4285_storage)": {
              "label": "mapping(uint256 => struct BondFactory.BondMetadata)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BondMetadata)4285_storage": {
              "label": "struct BondFactory.BondMetadata",
              "members": [
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "initBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maturityBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endOfActiveBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeDurationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "durationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "issuedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "minPurchasedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "couponRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/InstallmentBondPeriphery.sol:InstallmentBondPeriphery": {
        "src": "contracts\\InstallmentBondPeriphery.sol:10",
        "version": {
          "withMetadata": "162bd97831d05584d4613161a7faf9fc37c94d60b0e2ece1955576cf89de108e",
          "withoutMetadata": "2bbfab9097eadb4d5b1ca58463ed2c56650f5775bb6bc825e55ab2e4a3de8ab4",
          "linkedWithoutMetadata": "2bbfab9097eadb4d5b1ca58463ed2c56650f5775bb6bc825e55ab2e4a3de8ab4"
        },
        "inherit": [
          "contracts/BondPeriphery.sol:BondPeriphery"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "register()",
          "createBondFactory(string,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "InstallmentBondPeriphery",
            "src": "contracts\\InstallmentBondPeriphery.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_entities",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:12"
            },
            {
              "label": "_isRegistered",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:14"
            },
            {
              "label": "_isAllowedCurrency",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:16"
            },
            {
              "label": "_bondFactories",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:18"
            },
            {
              "label": "_bondFactoryIsInitialized",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/SoulBoundToken.sol:SoulBoundToken": {
        "src": "contracts\\SoulBoundToken.sol:9",
        "version": {
          "withMetadata": "f109814e10a1d557623f733eeb848e8bf08f797a9a605eb1ff27136bc7e95a59",
          "withoutMetadata": "2200f3c3b87ce3ac9d734e188263e566c788d86488257f147197e7c7e4b0a32c",
          "linkedWithoutMetadata": "2200f3c3b87ce3ac9d734e188263e566c788d86488257f147197e7c7e4b0a32c"
        },
        "inherit": [
          "contracts/interfaces/ISoulBoundToken.sol:ISoulBoundToken",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "()",
          "safeMint(address,uint8,bytes32)",
          "burn(uint256)",
          "modifyLevel(uint256,uint8)",
          "deactivate(uint256)",
          "reactivate(uint256)",
          "accessTier(uint256)",
          "accessTier(address)",
          "isActive(uint256)",
          "hashedIdentity(uint256)",
          "hasActiveSBT(address)",
          "ownerToTokenId(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SoulBoundToken",
            "src": "contracts\\SoulBoundToken.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            },
            {
              "label": "_tokenIdCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Counter)3101_storage",
              "contract": "SoulBoundToken",
              "src": "contracts\\SoulBoundToken.sol:12"
            },
            {
              "label": "_accessTier",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint8)",
              "contract": "SoulBoundToken",
              "src": "contracts\\SoulBoundToken.sol:14"
            },
            {
              "label": "_isActive",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "SoulBoundToken",
              "src": "contracts\\SoulBoundToken.sol:15"
            },
            {
              "label": "_hashedIdentity",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SoulBoundToken",
              "src": "contracts\\SoulBoundToken.sol:16"
            },
            {
              "label": "_ownerToTokenId",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SoulBoundToken",
              "src": "contracts\\SoulBoundToken.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint8)": {
              "label": "mapping(uint256 => uint8)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3101_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/ISoulBoundToken.sol:ISoulBoundToken": {
        "src": "contracts\\interfaces\\ISoulBoundToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasActiveSBT(address)",
          "ownerToTokenId(address)",
          "accessTier(uint256)",
          "accessTier(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    }
  ]
}