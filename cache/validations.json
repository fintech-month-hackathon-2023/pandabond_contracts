{
  "version": "3.4",
  "log": [
    {
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink\\contracts\\src\\v0.8\\interfaces\\AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:20",
        "version": {
          "withMetadata": "4a4ace96d365c9d72514b4d5f67028f1d5924635374f55b5fdd54d62bf80922c",
          "withoutMetadata": "b5905581a491aa47a4f3b0489e91566927385b66e6c306f67ce5af2f89473364",
          "linkedWithoutMetadata": "b5905581a491aa47a4f3b0489e91566927385b66e6c306f67ce5af2f89473364"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "(string)",
          "supportsInterface(bytes4)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol:14",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\extensions\\IERC1155MetadataURI.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\utils\\ERC1155Holder.sol:16",
        "version": {
          "withMetadata": "4f9647dfeb96f6c5a0fbd36742279c4b43a093fba2c1ba929705d1a74cd37d9e",
          "withoutMetadata": "8a060810352d7b1e3971d31eab0754e494d855b5e9ca5513c136a61e253f0158",
          "linkedWithoutMetadata": "8a060810352d7b1e3971d31eab0754e494d855b5e9ca5513c136a61e253f0158"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC1155\\utils\\ERC1155Receiver.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:19",
        "version": {
          "withMetadata": "ea342436f467ff5beaad1813ebf4e7ad602fe79faf9ad2d9f5e9f4d8be2c8371",
          "withoutMetadata": "c4acb14c6da5b7d41440e50f8a8676f304c2c14a54c323590328de16e8b1f843",
          "linkedWithoutMetadata": "c4acb14c6da5b7d41440e50f8a8676f304c2c14a54c323590328de16e8b1f843"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:9",
        "version": {
          "withMetadata": "c01fa026eba41cbaaa7449f2e391abb1ad5c05c3d433e87f190cd120f13307b0",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Counters.sol:Counters": {
        "src": "@openzeppelin\\contracts\\utils\\Counters.sol:14",
        "version": {
          "withMetadata": "f540c5ecb8ba8ac6cdef0a26f7f84442dcf2ed180f78932be591709682950503",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:11",
        "version": {
          "withMetadata": "c12afa5e73482a0beed3b3897025589568c5560a1eafcc3ef556ea3ebcf855bc",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:9",
        "version": {
          "withMetadata": "27789be326274200c4d0ca0f809987199e8a5fcd129848ff36bc0f2372f8cd2f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/Bond.sol:Bond": {
        "src": "contracts\\Bond.sol:9",
        "version": {
          "withMetadata": "d9f398fb1bc3ff0f83d27db36ae6877ddc3e32c794355d99f3d307b733173236",
          "withoutMetadata": "56d7ebe44953d6d63f30c7fb4c828fb27fd73d7425e37ef13af95b47609e33bc",
          "linkedWithoutMetadata": "56d7ebe44953d6d63f30c7fb4c828fb27fd73d7425e37ef13af95b47609e33bc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "(address,string)",
          "mint(address,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(string,address,address))",
          "burn(address,uint256,uint256)",
          "bondData(uint256)",
          "bondMetadata(uint256)",
          "bondDataAsStruct(uint256)",
          "bondMetadataAsStruct(uint256)",
          "numBondsIssued()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Bond",
            "src": "contracts\\Bond.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\Bond.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bondDB",
            "src": "contracts\\Bond.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_bondData",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(BondData)11127_storage)",
              "contract": "Bond",
              "src": "contracts\\Bond.sol:11"
            },
            {
              "label": "_bondMetadata",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(BondMetadata)11108_storage)",
              "contract": "Bond",
              "src": "contracts\\Bond.sol:12"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Counter)3186_storage",
              "contract": "Bond",
              "src": "contracts\\Bond.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondData)11127_storage)": {
              "label": "mapping(uint256 => struct IBond.BondData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondMetadata)11108_storage)": {
              "label": "mapping(uint256 => struct IBond.BondMetadata)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BondData)11127_storage": {
              "label": "struct IBond.BondData",
              "members": [
                {
                  "label": "tokenAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "initBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "maturityBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "endOfActiveBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "activeDurationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "durationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "issuedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "minPurchasedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "couponRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(BondMetadata)11108_storage": {
              "label": "struct IBond.BondMetadata",
              "members": [
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "currency",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "issuer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Counter)3186_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/BondDB.sol:BondDB": {
        "src": "contracts\\BondDB.sol:16",
        "version": {
          "withMetadata": "132425d4ee426a2ea0bfb68bf3d27af4b25fcb533320e223b8491370fc04590f",
          "withoutMetadata": "ddd73e8605d4a1d2652fec4f4113adc8c887250e7b744d388400cae0307d1570",
          "linkedWithoutMetadata": "ddd73e8605d4a1d2652fec4f4113adc8c887250e7b744d388400cae0307d1570"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "registerPeriphery(address[])",
          "registerFactory(address)",
          "incrementFundsRaisedByToken(uint256,address)",
          "incrementFundsRaisedByTokenAndCategory(uint256,address,uint256)",
          "incrementFundsRaisedByCompanyAndToken(uint256,address,address)",
          "incrementFundsRaisedByCompanyAndTokenAndCategory(uint256,address,address,uint256)",
          "incrementNumberOfIssuedBondsByCategory(uint256)",
          "incrementNumberOfIssuedBondsByCompanyAndCategory(address,uint256)",
          "incrementNumberOfTimesDefaultedByCompany(address)",
          "incrementNumberOfTimesDefaultedByCompanyAndCategory(address,uint256)",
          "owner()",
          "isPeriphery(address)",
          "isFactory(address)",
          "fundsRaisedByToken(address)",
          "fundsRaisedByTokenAndCategory(address,uint256)",
          "fundsRaisedByCompanyAndToken(address,address)",
          "fundsRaisedByCompanyAndTokenAndCategory(address,address,uint256)",
          "numberOfIssuedBondsByCategory(uint256)",
          "numberOfIssuedBondsByCompanyAndCategory(address,uint256)",
          "numberOfTimesDefaultedByCompany(address)",
          "numberOfTimesDefaultedByCompanyAndCategory(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BondDB",
            "src": "contracts\\BondDB.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\BondDB.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_isPeriphery",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondDB",
              "src": "contracts\\BondDB.sol:19"
            },
            {
              "label": "_isFactory",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondDB",
              "src": "contracts\\BondDB.sol:20"
            },
            {
              "label": "_fundsRaisedByToken",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BondDB",
              "src": "contracts\\BondDB.sol:22"
            },
            {
              "label": "_fundsRaisedByTokenAndCategory",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "BondDB",
              "src": "contracts\\BondDB.sol:23"
            },
            {
              "label": "_fundsRaisedByCompanyAndToken",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "BondDB",
              "src": "contracts\\BondDB.sol:24"
            },
            {
              "label": "_fundsRaisedByCompanyAndTokenAndCategory",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))",
              "contract": "BondDB",
              "src": "contracts\\BondDB.sol:25"
            },
            {
              "label": "_numberOfIssuedBondsByCategory",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondDB",
              "src": "contracts\\BondDB.sol:26"
            },
            {
              "label": "_numberOfIssuedBondsByCompanyAndCategory",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "BondDB",
              "src": "contracts\\BondDB.sol:27"
            },
            {
              "label": "_numberOfTimesDefaultedByCompany",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "BondDB",
              "src": "contracts\\BondDB.sol:28"
            },
            {
              "label": "_numberOfTimesDefaultedByCompanyAndCategory",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "BondDB",
              "src": "contracts\\BondDB.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
              "label": "mapping(address => mapping(address => mapping(uint256 => uint256)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/BondFactory.sol:BondFactory": {
        "src": "contracts\\BondFactory.sol:11",
        "version": {
          "withMetadata": "0bca8a5b570eaefb5f020c8dc0aa80f89c7fce3fa0d2225156e595dfe85963e0",
          "withoutMetadata": "7dcacf85a8dfde6d532504aa0702b7d667b9d9541536210146c875b6f2bf0c3c",
          "linkedWithoutMetadata": "7dcacf85a8dfde6d532504aa0702b7d667b9d9541536210146c875b6f2bf0c3c"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "(address,address,address,address)",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256)",
          "purchase(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawExcess(uint256)",
          "redeem(uint256,uint256)",
          "deposit(uint256,uint256)",
          "preMaturityDefault(uint256)",
          "markAsDefaulted(uint256)",
          "markAsCompleted(uint256)",
          "remainingQuantity(uint256)",
          "timeElapsed(uint256)",
          "timeRemainingToMaturity(uint256)",
          "timeRemainingToEndOfActive(uint256)",
          "principal(uint256)",
          "principalWithInterest(uint256)",
          "poolAmount(uint256)",
          "tvl()",
          "isFullyRedeemed(uint256)",
          "isActive(uint256)",
          "isFulfilled(uint256)",
          "isCanceled(uint256)",
          "hasReachedMaturity(uint256)",
          "isCompleted(uint256)",
          "isCompletedInTheory(uint256)",
          "isDefaultedInTheory(uint256)",
          "isDefaulted(uint256)",
          "baseToken()",
          "owner()",
          "designatedTokenPool(uint256)",
          "isIssuedByFactory(uint256)",
          "bonds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BondFactory",
            "src": "contracts\\BondFactory.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\BondFactory.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_baseToken",
            "src": "contracts\\BondFactory.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bondDB",
            "src": "contracts\\BondFactory.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bondToken",
            "src": "contracts\\BondFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_numBonds",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Counter)3186_storage",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:13"
            },
            {
              "label": "_bonds",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:22"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:24"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:25"
            },
            {
              "label": "_designatedTokenPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:26"
            },
            {
              "label": "_tokenAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:27"
            },
            {
              "label": "_tokenAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:28"
            },
            {
              "label": "_isIssuedByFactory",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:30"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:31"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:32"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3186_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/BondPeriphery.sol:BondPeriphery": {
        "src": "contracts\\BondPeriphery.sol:10",
        "version": {
          "withMetadata": "42be4b163d13473df132f3b039bc684e81bd0063e21134ca2211d57973cb79e9",
          "withoutMetadata": "136db7b661a9019de526e78d2b51ee72811da5c18135e2249fa2c76e9e0e1be6",
          "linkedWithoutMetadata": "136db7b661a9019de526e78d2b51ee72811da5c18135e2249fa2c76e9e0e1be6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "register()",
          "createBondFactory(address)",
          "owner()",
          "entities()",
          "isRegistered(address)",
          "bondFactories(address)",
          "bondFactoryIsInitialized(address,address)",
          "bondDB()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BondPeriphery",
            "src": "contracts\\BondPeriphery.sol:49"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\BondPeriphery.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_sbt",
            "src": "contracts\\BondPeriphery.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bondDB",
            "src": "contracts\\BondPeriphery.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bondToken",
            "src": "contracts\\BondPeriphery.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_entities",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:17"
            },
            {
              "label": "_isRegistered",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:19"
            },
            {
              "label": "_isAllowedCurrency",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:21"
            },
            {
              "label": "_bondFactories",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:23"
            },
            {
              "label": "_bondFactoryIsInitialized",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/CallableBondFactory.sol:CallableBondFactory": {
        "src": "contracts\\CallableBondFactory.sol:6",
        "version": {
          "withMetadata": "13fa968b90e4c31218efd5445078b1daf509ca2a835b4f7056ac296237512fb1",
          "withoutMetadata": "8ac42a6fe4f3c8b1173c2720ac32eedfb3ad92832b53b6a03fb669f1f56aa915",
          "linkedWithoutMetadata": "8ac42a6fe4f3c8b1173c2720ac32eedfb3ad92832b53b6a03fb669f1f56aa915"
        },
        "inherit": [
          "contracts/BondFactory.sol:BondFactory",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "(address,address,address,address)",
          "call(uint256)",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256)",
          "principalWithInterest(uint256)",
          "couponRateOnCall(uint256)",
          "isCalled(uint256)",
          "minObligationPeriod(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CallableBondFactory",
            "src": "contracts\\CallableBondFactory.sol:21"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_numBonds",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Counter)3186_storage",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:13"
            },
            {
              "label": "_bonds",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:22"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:24"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:25"
            },
            {
              "label": "_designatedTokenPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:26"
            },
            {
              "label": "_tokenAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:27"
            },
            {
              "label": "_tokenAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:28"
            },
            {
              "label": "_isIssuedByFactory",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:30"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:31"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:32"
            },
            {
              "label": "_numBonds",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(Counter)3186_storage",
              "contract": "CallableBondFactory",
              "src": "contracts\\CallableBondFactory.sol:8"
            },
            {
              "label": "_minObligationPeriod",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "CallableBondFactory",
              "src": "contracts\\CallableBondFactory.sol:11"
            },
            {
              "label": "_couponRateOnCall",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "CallableBondFactory",
              "src": "contracts\\CallableBondFactory.sol:12"
            },
            {
              "label": "_isCalled",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "CallableBondFactory",
              "src": "contracts\\CallableBondFactory.sol:13"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3186_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/CallableBondPeriphery.sol:CallableBondPeriphery": {
        "src": "contracts\\CallableBondPeriphery.sol:9",
        "version": {
          "withMetadata": "ce452a7fd6380c78356db9a64a797648ece6bceddad0709081bb327268dfe77f",
          "withoutMetadata": "e458303f62a64f0f2e7c731b159cd4874699356a37fed06ba5f978b8d5bfb71a",
          "linkedWithoutMetadata": "e458303f62a64f0f2e7c731b159cd4874699356a37fed06ba5f978b8d5bfb71a"
        },
        "inherit": [
          "contracts/BondPeriphery.sol:BondPeriphery"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "register()",
          "createBondFactory(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CallableBondPeriphery",
            "src": "contracts\\CallableBondPeriphery.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_entities",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:17"
            },
            {
              "label": "_isRegistered",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:19"
            },
            {
              "label": "_isAllowedCurrency",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:21"
            },
            {
              "label": "_bondFactories",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:23"
            },
            {
              "label": "_bondFactoryIsInitialized",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/CompanyDB.sol:CompanyDB": {
        "src": "contracts\\CompanyDB.sol:6",
        "version": {
          "withMetadata": "34afa656a7c79cc4ff42314547b9a20445e1a76cbe5bf5643d6f69e238d5fbed",
          "withoutMetadata": "fc56059663bcd0b8667c3e683286e74463c694c6edf8599e368d5a35b08ae0a0",
          "linkedWithoutMetadata": "fc56059663bcd0b8667c3e683286e74463c694c6edf8599e368d5a35b08ae0a0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "registerCompany(address,string,bytes32,uint8)",
          "reissueSBT(address,bytes32,uint8)",
          "deactivateSBT(address)",
          "activateSBT(address)",
          "modifyTier(address,uint8)",
          "isRegisteredCompany(address)",
          "registeredCompanies()",
          "companyMetadata(address)",
          "owner()",
          "soulBoundToken()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CompanyDB",
            "src": "contracts\\CompanyDB.sol:30"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\CompanyDB.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_soulBoundToken",
            "src": "contracts\\CompanyDB.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_registeredCompanies",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "CompanyDB",
              "src": "contracts\\CompanyDB.sol:13"
            },
            {
              "label": "_isRegisteredCompany",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "CompanyDB",
              "src": "contracts\\CompanyDB.sol:14"
            },
            {
              "label": "_companyMetadata",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(CompanyMetadata)7271_storage)",
              "contract": "CompanyDB",
              "src": "contracts\\CompanyDB.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(CompanyMetadata)7271_storage)": {
              "label": "mapping(address => struct CompanyDB.CompanyMetadata)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(CompanyMetadata)7271_storage": {
              "label": "struct CompanyDB.CompanyMetadata",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "hashedIdentity",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "tier",
                  "type": "t_uint8",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/DualCurrencyBond.sol:DualCurrencyBond": {
        "src": "contracts\\DualCurrencyBond.sol:9",
        "version": {
          "withMetadata": "ad2f7d678be07696c77083fc472c1bf251c57d0ee3166d63769111bec8e036d1",
          "withoutMetadata": "d38dfd30959682b3afb30e4cad3492cafc06673cf3349606e5cb9527795e5b36",
          "linkedWithoutMetadata": "d38dfd30959682b3afb30e4cad3492cafc06673cf3349606e5cb9527795e5b36"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "(address,string)",
          "mint(address,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(string,address,address,address))",
          "burn(address,uint256,uint256)",
          "bondData(uint256)",
          "bondMetadata(uint256)",
          "bondDataAsStruct(uint256)",
          "bondMetadataAsStruct(uint256)",
          "numBondsIssued()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DualCurrencyBond",
            "src": "contracts\\DualCurrencyBond.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\DualCurrencyBond.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bondDB",
            "src": "contracts\\DualCurrencyBond.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin\\contracts\\token\\ERC1155\\ERC1155.sol:30"
            },
            {
              "label": "_bondMetadata",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(BondMetadata)11399_storage)",
              "contract": "DualCurrencyBond",
              "src": "contracts\\DualCurrencyBond.sol:11"
            },
            {
              "label": "_bondData",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(BondData)11420_storage)",
              "contract": "DualCurrencyBond",
              "src": "contracts\\DualCurrencyBond.sol:12"
            },
            {
              "label": "_id",
              "offset": 0,
              "slot": "5",
              "type": "t_struct(Counter)3186_storage",
              "contract": "DualCurrencyBond",
              "src": "contracts\\DualCurrencyBond.sol:15"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondData)11420_storage)": {
              "label": "mapping(uint256 => struct IDualCurrencyBond.BondData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(BondMetadata)11399_storage)": {
              "label": "mapping(uint256 => struct IDualCurrencyBond.BondMetadata)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(BondData)11420_storage": {
              "label": "struct IDualCurrencyBond.BondData",
              "members": [
                {
                  "label": "tokenAAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenBAmountPerBond",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "initBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maturityBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "endOfActiveBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "activeDurationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "durationInDays",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "issuedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "minPurchasedQuantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "couponRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                }
              ],
              "numberOfBytes": "320"
            },
            "t_struct(BondMetadata)11399_storage": {
              "label": "struct IDualCurrencyBond.BondMetadata",
              "members": [
                {
                  "label": "ticker",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "currencyA",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "currencyB",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "issuer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Counter)3186_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/DualCurrencyBondFactory.sol:DualCurrencyBondFactory": {
        "src": "contracts\\DualCurrencyBondFactory.sol:11",
        "version": {
          "withMetadata": "a9468537ed032b01f8127c9a2a9d3ebbf489937f7c4ae505d9e95fddda4e1205",
          "withoutMetadata": "1710f72872b0b183ed17e4099f22b4578d160dd4bd6aed9f92ece3cdb5bee453",
          "linkedWithoutMetadata": "1710f72872b0b183ed17e4099f22b4578d160dd4bd6aed9f92ece3cdb5bee453"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "(address,address,address,address,address,address,address)",
          "getLatestPriceA()",
          "getLatestPriceB()",
          "getAtoBExchangeRate()",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256)",
          "purchase(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "withdrawExcess(uint256)",
          "redeem(uint256,uint256)",
          "deposit(uint256,uint256)",
          "preMaturityDefault(uint256)",
          "markAsDefaulted(uint256)",
          "markAsCompleted(uint256)",
          "remainingQuantity(uint256)",
          "timeElapsed(uint256)",
          "timeRemainingToMaturity(uint256)",
          "timeRemainingToEndOfActive(uint256)",
          "couponRate(uint256)",
          "principal(uint256)",
          "principalWithInterest(uint256)",
          "poolAAmount(uint256)",
          "poolBAmount(uint256)",
          "tvlA()",
          "tvlB()",
          "isFullyRedeemed(uint256)",
          "isActive(uint256)",
          "isFulfilled(uint256)",
          "isCanceled(uint256)",
          "hasReachedMaturity(uint256)",
          "isCompleted(uint256)",
          "isCompletedInTheory(uint256)",
          "isDefaultedInTheory(uint256)",
          "isDefaulted(uint256)",
          "designatedTokenAPool(uint256)",
          "designatedTokenBPool(uint256)",
          "tokenA()",
          "tokenB()",
          "owner()",
          "isIssuedByFactory(uint256)",
          "bonds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DualCurrencyBondFactory",
            "src": "contracts\\DualCurrencyBondFactory.sol:67"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_priceFeedA",
            "src": "contracts\\DualCurrencyBondFactory.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_priceFeedB",
            "src": "contracts\\DualCurrencyBondFactory.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\DualCurrencyBondFactory.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_tokenA",
            "src": "contracts\\DualCurrencyBondFactory.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_tokenB",
            "src": "contracts\\DualCurrencyBondFactory.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bondDB",
            "src": "contracts\\DualCurrencyBondFactory.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bondToken",
            "src": "contracts\\DualCurrencyBondFactory.sol:22"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_numBonds",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Counter)3186_storage",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:13"
            },
            {
              "label": "_bonds",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:26"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:28"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:29"
            },
            {
              "label": "_designatedTokenAPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:30"
            },
            {
              "label": "_designatedTokenBPool",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:31"
            },
            {
              "label": "_tokenAAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:32"
            },
            {
              "label": "_tokenBAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:33"
            },
            {
              "label": "_tokenBAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:34"
            },
            {
              "label": "_isIssuedByFactory",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:36"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:37"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "DualCurrencyBondFactory",
              "src": "contracts\\DualCurrencyBondFactory.sol:38"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3186_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/DualCurrencyBondPeriphery.sol:DualCurrencyBondPeriphery": {
        "src": "contracts\\DualCurrencyBondPeriphery.sol:10",
        "version": {
          "withMetadata": "b07ed7b32ef2409173f7eb24314452e5933a51ebd716d4754d8113fe52ad4058",
          "withoutMetadata": "863231e8b9004326ac5ce4c6fa8e59dc6623eb8a1506c36bbb3f7503b1c46ae5",
          "linkedWithoutMetadata": "863231e8b9004326ac5ce4c6fa8e59dc6623eb8a1506c36bbb3f7503b1c46ae5"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "register()",
          "createDualCurrencyBondFactory(address,address)",
          "registerPriceFeed(address,address)",
          "deregisterPriceFeed(address)",
          "owner()",
          "entities()",
          "isRegistered(address)",
          "dualCurrencyBondFactories(address)",
          "dualCurrencyBondFactoryIsInitialized(address,address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DualCurrencyBondPeriphery",
            "src": "contracts\\DualCurrencyBondPeriphery.sol:47"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_owner",
            "src": "contracts\\DualCurrencyBondPeriphery.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_sbt",
            "src": "contracts\\DualCurrencyBondPeriphery.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bondDB",
            "src": "contracts\\DualCurrencyBondPeriphery.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_bondToken",
            "src": "contracts\\DualCurrencyBondPeriphery.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_entities",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "DualCurrencyBondPeriphery",
              "src": "contracts\\DualCurrencyBondPeriphery.sol:17"
            },
            {
              "label": "_priceFeeds",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_address)",
              "contract": "DualCurrencyBondPeriphery",
              "src": "contracts\\DualCurrencyBondPeriphery.sol:19"
            },
            {
              "label": "_isRegistered",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DualCurrencyBondPeriphery",
              "src": "contracts\\DualCurrencyBondPeriphery.sol:20"
            },
            {
              "label": "_dualCurrencyBondFactories",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "DualCurrencyBondPeriphery",
              "src": "contracts\\DualCurrencyBondPeriphery.sol:22"
            },
            {
              "label": "_dualCurrencyBondFactoryIsInitialized",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_bool)))",
              "contract": "DualCurrencyBondPeriphery",
              "src": "contracts\\DualCurrencyBondPeriphery.sol:24"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
              "label": "mapping(address => mapping(address => mapping(address => bool)))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/InstallmentBondFactory.sol:InstallmentBondFactory": {
        "src": "contracts\\InstallmentBondFactory.sol:6",
        "version": {
          "withMetadata": "04eb5f960f664e06fbd064a842a7be2dce5db81f3e3d6614010419d8e45fa07b",
          "withoutMetadata": "e154d58d8e80265b4d4ddc01df5984f8c35db292973448516a99eb74b4495f61",
          "linkedWithoutMetadata": "e154d58d8e80265b4d4ddc01df5984f8c35db292973448516a99eb74b4495f61"
        },
        "inherit": [
          "contracts/BondFactory.sol:BondFactory",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "(address,address,address,address)",
          "issue(uint256,uint256,uint256,string,uint256,uint256,uint256)",
          "fulfillObligationsAndLock(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "isDefaultedInTheory(uint256)",
          "lockedTokenAmountPerBond(uint256)",
          "yearOptionToDays(uint256)",
          "yearOptionToObligationRateList(uint256)",
          "retrieveMinObligationList(uint256,uint256)",
          "nextObligationDate(uint256)",
          "minObligationTokenAmountPerBondList(uint256)",
          "lockedTokenAmount(uint256)",
          "numberOfTimesFulfilled(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "InstallmentBondFactory",
            "src": "contracts\\InstallmentBondFactory.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "THREE",
            "src": "contracts\\InstallmentBondFactory.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "FIVE",
            "src": "contracts\\InstallmentBondFactory.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "TEN",
            "src": "contracts\\InstallmentBondFactory.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_numBonds",
              "offset": 0,
              "slot": "0",
              "type": "t_struct(Counter)3186_storage",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:13"
            },
            {
              "label": "_bonds",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:22"
            },
            {
              "label": "_purchasedQuantity",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:24"
            },
            {
              "label": "_redeemedQuantity",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:25"
            },
            {
              "label": "_designatedTokenPool",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:26"
            },
            {
              "label": "_tokenAmountPerBondAfterDefault",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:27"
            },
            {
              "label": "_tokenAmountPerBondAfterComplete",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:28"
            },
            {
              "label": "_isIssuedByFactory",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:30"
            },
            {
              "label": "_isDefaulted",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:31"
            },
            {
              "label": "_isCompleted",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "BondFactory",
              "src": "contracts\\BondFactory.sol:32"
            },
            {
              "label": "_numBonds",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(Counter)3186_storage",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:8"
            },
            {
              "label": "THREE",
              "offset": 0,
              "slot": "11",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:13"
            },
            {
              "label": "FIVE",
              "offset": 0,
              "slot": "12",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:14"
            },
            {
              "label": "TEN",
              "offset": 0,
              "slot": "13",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:15"
            },
            {
              "label": "_nextObligationDate",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:17"
            },
            {
              "label": "_minObligationTokenAmountPerBondList",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:18"
            },
            {
              "label": "_lockedTokenAmount",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:19"
            },
            {
              "label": "_numberOfTimesFulfilled",
              "offset": 0,
              "slot": "17",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "InstallmentBondFactory",
              "src": "contracts\\InstallmentBondFactory.sol:20"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(uint256 => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3186_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/InstallmentBondPeriphery.sol:InstallmentBondPeriphery": {
        "src": "contracts\\InstallmentBondPeriphery.sol:10",
        "version": {
          "withMetadata": "09906a5ef230a91382b474a0748af07e501949a848b1752a2c40d5ea09b7d0f4",
          "withoutMetadata": "190421938ef5c533c1ab92df140b3de615c38e41242d04dbc28aa9ebf8d2d66a",
          "linkedWithoutMetadata": "190421938ef5c533c1ab92df140b3de615c38e41242d04dbc28aa9ebf8d2d66a"
        },
        "inherit": [
          "contracts/BondPeriphery.sol:BondPeriphery"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "register()",
          "createBondFactory(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "InstallmentBondPeriphery",
            "src": "contracts\\InstallmentBondPeriphery.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_entities",
              "offset": 0,
              "slot": "0",
              "type": "t_array(t_address)dyn_storage",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:17"
            },
            {
              "label": "_isRegistered",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:19"
            },
            {
              "label": "_isAllowedCurrency",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:21"
            },
            {
              "label": "_bondFactories",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:23"
            },
            {
              "label": "_bondFactoryIsInitialized",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "BondPeriphery",
              "src": "contracts\\BondPeriphery.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/SoulBoundToken.sol:SoulBoundToken": {
        "src": "contracts\\SoulBoundToken.sol:10",
        "version": {
          "withMetadata": "b2c9695df8198a03777571ca62d289d76b81e1c0a9becbca93be8ec56a24e45c",
          "withoutMetadata": "333d2347543a1b4a80ddad02fc64ad434a98e10034b2c60420d5ccd11840b1e1",
          "linkedWithoutMetadata": "333d2347543a1b4a80ddad02fc64ad434a98e10034b2c60420d5ccd11840b1e1"
        },
        "inherit": [
          "contracts/interfaces/ISoulBoundToken.sol:ISoulBoundToken",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Counters.sol:Counters"
        ],
        "methods": [
          "()",
          "registerDbAdmin(address)",
          "safeMint(address,uint8,bytes32)",
          "modifyTier(uint256,uint8)",
          "deactivate(uint256)",
          "activate(uint256)",
          "accessTier(uint256)",
          "accessTier(address)",
          "isActive(uint256)",
          "hashedIdentity(uint256)",
          "hasActiveSBT(address)",
          "hasSBT(address)",
          "ownerToTokenId(address)",
          "dbAdmin()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SoulBoundToken",
            "src": "contracts\\SoulBoundToken.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:24"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:27"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:33"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:36"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            },
            {
              "label": "_tokenIdCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Counter)3186_storage",
              "contract": "SoulBoundToken",
              "src": "contracts\\SoulBoundToken.sol:13"
            },
            {
              "label": "_dbAdmin",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(CompanyDB)7595",
              "contract": "SoulBoundToken",
              "src": "contracts\\SoulBoundToken.sol:15"
            },
            {
              "label": "_accessTier",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint8)",
              "contract": "SoulBoundToken",
              "src": "contracts\\SoulBoundToken.sol:17"
            },
            {
              "label": "_isActive",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_bool)",
              "contract": "SoulBoundToken",
              "src": "contracts\\SoulBoundToken.sol:18"
            },
            {
              "label": "_hashedIdentity",
              "offset": 0,
              "slot": "11",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "SoulBoundToken",
              "src": "contracts\\SoulBoundToken.sol:19"
            },
            {
              "label": "_ownerToTokenId",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "SoulBoundToken",
              "src": "contracts\\SoulBoundToken.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(CompanyDB)7595": {
              "label": "contract CompanyDB",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bool)": {
              "label": "mapping(uint256 => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint8)": {
              "label": "mapping(uint256 => uint8)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Counter)3186_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IBond.sol:IBond": {
        "src": "contracts\\interfaces\\IBond.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "mint(address,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(string,address,address))",
          "burn(address,uint256,uint256)",
          "bondData(uint256)",
          "bondMetadata(uint256)",
          "bondDataAsStruct(uint256)",
          "bondMetadataAsStruct(uint256)",
          "numBondsIssued()",
          "balanceOf(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IBondDB.sol:IBondDB": {
        "src": "contracts\\interfaces\\IBondDB.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registerPeriphery(address[])",
          "registerFactory(address)",
          "incrementFundsRaisedByToken(uint256,address)",
          "incrementFundsRaisedByTokenAndCategory(uint256,address,uint256)",
          "incrementFundsRaisedByCompanyAndToken(uint256,address,address)",
          "incrementFundsRaisedByCompanyAndTokenAndCategory(uint256,address,address,uint256)",
          "incrementNumberOfIssuedBondsByCategory(uint256)",
          "incrementNumberOfIssuedBondsByCompanyAndCategory(address,uint256)",
          "incrementNumberOfTimesDefaultedByCompany(address)",
          "incrementNumberOfTimesDefaultedByCompanyAndCategory(address,uint256)",
          "owner()",
          "isPeriphery(address)",
          "isFactory(address)",
          "fundsRaisedByToken(address)",
          "fundsRaisedByTokenAndCategory(address,uint256)",
          "fundsRaisedByCompanyAndToken(address,address)",
          "fundsRaisedByCompanyAndTokenAndCategory(address,address,uint256)",
          "numberOfIssuedBondsByCategory(uint256)",
          "numberOfIssuedBondsByCompanyAndCategory(address,uint256)",
          "numberOfTimesDefaultedByCompany(address)",
          "numberOfTimesDefaultedByCompanyAndCategory(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/IDualCurrencyBond.sol:IDualCurrencyBond": {
        "src": "contracts\\interfaces\\IDualCurrencyBond.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "mint(address,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(string,address,address,address))",
          "burn(address,uint256,uint256)",
          "bondMetadata(uint256)",
          "bondData(uint256)",
          "bondMetadataAsStruct(uint256)",
          "bondDataAsStruct(uint256)",
          "numBondsIssued()",
          "balanceOf(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      },
      "contracts/interfaces/ISoulBoundToken.sol:ISoulBoundToken": {
        "src": "contracts\\interfaces\\ISoulBoundToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasActiveSBT(address)",
          "ownerToTokenId(address)",
          "accessTier(uint256)",
          "accessTier(address)",
          "safeMint(address,uint8,bytes32)",
          "modifyTier(uint256,uint8)",
          "deactivate(uint256)",
          "activate(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.17"
      }
    }
  ]
}